{"version":3,"sources":["loading.svg","service.js","components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Server","getImg","token","mode","cap","a","url","process","Promise","resolve","Error","data","fetch","method","body","JSON","stringify","headers","Headers","res","ok","text","ResState","Result","state","errorMsg","height","width","Image","src","loading","Alert","variant","Core","recaptchaRef","useRef","useState","setToken","setRes","isBtnDisabled","Row","ref","sitekey","onChange","Button","className","type","disabled","onClick","then","catch","e","message","finally","current","reset","AnimeHeads","hairs","eyes","hair","setHair","eye","setEye","Container","Col","Form","Control","as","defaultValue","target","value","map","idx","key","Birds","examples","setCap","_","itemsCheck","setItemsCheck","rows","ListGroup","Item","example","action","active","i","handleItemClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.c45fbfa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.c25f5003.svg\";","const Server = {\n  mock: \"mock\",\n  dev: \"dev\",\n  prod: \"prod\",\n}\n\nconst server = process.env.REACT_APP_SERVER\nconst prodUrl = process.env.REACT_APP_PROD_URL\nconst getImg = async (token, mode, cap) => {\n  let url = \"\"\n  switch (server) {\n    case Server.mock:\n      return Promise.resolve(`${process.env.PUBLIC_URL}/${mode}_mock.jpg`)\n    case Server.dev:\n      url = \"http://127.0.0.1:5000\"\n      break\n    case Server.prod:\n      url = prodUrl\n      break\n    default:\n      throw Error(`No such server: ${server}`)\n  }\n  url += `/${mode}`\n\n  let data = {token, cap}\n  const res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    })\n  })\n  if(res.ok) { return await res.text() }\n  else { throw Error(await res.text()) }\n}\n\nexport {getImg}\n","import React, { useState, useRef } from 'react'\nimport ReCAPTCHA from \"react-google-recaptcha\"\n\nimport Button from 'react-bootstrap/Button'\nimport Image from 'react-bootstrap/Image'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Alert from 'react-bootstrap/Alert'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport { getImg } from './service'\nimport loading from './loading.svg'\n\nconst ResState = {\n  init: \"init\",\n  loading: \"loading\",\n  success: \"success\",\n  fail: \"fail\",\n}\n\nconst Result = ({state, url, errorMsg, mode}) => {\n  let height = mode==='anime_heads'?\"128\":\"256\"\n  let width = height\n  switch (state) {\n    case ResState.init:\n      return (<div />)\n    case ResState.loading:\n      return (<Image src={loading} height={height} width={width} />)\n    case ResState.success:\n      return (<Image src={url} height={height} width={width} />)\n    case ResState.fail:\n      return (<Alert variant=\"danger\">{errorMsg}</Alert>)\n    default:\n      return (<div />)\n  }\n}\n\nconst checkRecaptcha = process.env.REACT_APP_CHECK_RECAPTCHA\nconst recaptchaSiteKey = process.env.REACT_APP_RECAPTCHA_SITEKEY\nconst Core = ({mode, cap}) => {\n  const recaptchaRef = useRef(null)\n  const [token, setToken] = useState(null)\n  const [res, setRes] = useState({state: 'init', url: \"\", errorMsg: \"\"})\n  const isBtnDisabled = () => checkRecaptcha==='true' && (token===null || res.state===ResState.loading)\n  const handleSubmit = () => {\n    setRes({...res, state: ResState.loading})\n    getImg(token, mode, cap)\n    .then(url =>{\n      setRes({...res, state: ResState.success, url})\n    }).catch(e => {\n      setRes({...res, state: ResState.fail, errorMsg: e.message})\n    }).finally(()=>{\n      if(recaptchaRef!==null && recaptchaRef.current!==null){ recaptchaRef.current.reset() }\n      setToken(null)\n    })\n  }\n  return (\n    <div>\n      <Row>\n        {checkRecaptcha==='true' && <ReCAPTCHA ref={recaptchaRef} sitekey={recaptchaSiteKey} onChange={(token)=>setToken(token)} />}\n        <Button className=\"btn-block\" variant=\"primary\" type=\"button\" disabled={isBtnDisabled()} onClick={handleSubmit}>{isBtnDisabled()?\"Please Click Recaptcha\":\"Get Image\"}</Button>\n      </Row>\n      <Row><Result {...res} mode={mode} /></Row>\n    </div>\n  )\n}\n\nconst AnimeHeads = () => {\n  const hairs = ['orange hair', 'white hair', 'aqua hair', 'gray hair','green hair', 'red hair',\n                  'purple hair', 'pink hair','blue hair', 'black hair', 'brown hair', 'blonde hair']\n  const eyes = ['black eyes', 'orange eyes', 'purple eyes', 'pink eyes', 'yellow eyes', 'aqua eyes', \n                'green eyes', 'brown eyes', 'red eyes', 'blue eyes']\n  const [hair, setHair] = useState(hairs[4])\n  const [eye, setEye] = useState(eyes[2])\n  return (\n    <Container>\n      <Row><h2>Anime Face</h2></Row>\n      <Row><h4>Generate an anime face by machine. You can specify hair and eye color.</h4></Row>\n      <Row>\n        <Col>\n            <Form.Control as=\"select\" defaultValue={hair} onChange={(e)=>setHair(e.target.value)}>\n              {hairs.map((hair, idx)=><option key={idx} value={hair}>{hair}</option>)}\n            </Form.Control>\n        </Col>\n        <Col>\n            <Form.Control as=\"select\" defaultValue={eye} onChange={(e)=>setEye(e.target.value)}>\n              {eyes.map((eye, idx)=><option key={idx} value={eye}>{eye}</option>)}\n            </Form.Control>\n        </Col>\n      </Row>\n        \n      <Core mode=\"anime_heads\" cap={`${hair} ${eye}`}/>\n    </Container>\n  )\n}\n\nconst Birds = () => {\n  const examples = [\n\t  \"this bird has a green crown, black wings and a yellow belly\", \n\t  \"the bird has a yellow crown and a black eyering that is round\", \n\t  \"a small red bird\", \n\t  \"a small orange bird\",\n    \"this bird has wings that are red and has a white belly\",\n    \"this goofy looking bird has a bright red beak and dull white and gray plumage.\",\n    \"this bird is white in color, with a yellow beak.\",\n    \"this bird is red and black in color and has a sharp black beak\",\n    \"a small black bird\",\n    \"a small yellow bird\",\n  ]\n  const [cap, setCap] = useState(examples[0])\n  const [itemsCheck, setItemsCheck] = useState(examples.map(_=>false))\n  const handleFormChange = (e) => {\n    setCap(e.target.value)\n    setItemsCheck(itemsCheck.map(_=>false))\n  }\n  const handleItemClick = (e, idx) => {\n    setCap(e.target.value)\n    setItemsCheck(\n      itemsCheck.map((_, i)=> i === idx ? true : false)\n    )\n  }\n  return (\n    <Container>\n      <Row><h2>Birds</h2></Row>\n      <Row><h4>Generate a bird by machine. You can specify any string that describe a bird.</h4></Row>\n      <Row>\n        <Form.Control as=\"textarea\" rows=\"2\" value={cap} onChange={handleFormChange} />\n      </Row>\n      <Row>\n        <Col>\n          <ListGroup>\n            <ListGroup.Item key={-1} disabled>Examples:</ListGroup.Item>\n            {examples.map((example, idx)=>(\n              <ListGroup.Item key={idx} action value={example} active={itemsCheck[idx]} onClick={(e)=> handleItemClick(e, idx)}>{example}</ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Col>\n      </Row>\n      <Core mode=\"birds\" cap={cap}/>\n    </Container>\n  )\n}\n\nexport {AnimeHeads, Birds}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { AnimeHeads, Birds } from './components'\n\nfunction App() {\n  return (\n    <div>\n      <h1>Deep_t2i simple demo site</h1>\n      <hr />\n      <AnimeHeads />\n      <hr />\n      <Birds />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}